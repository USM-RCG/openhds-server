<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <bean id="databaseConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:/META-INF/build-info.properties</value>
            </list>
        </property>
    </bean>

    <!-- dao -->
    <context:component-scan base-package="com.github.cimsbioko.server.dao" />

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" depends-on="flyway">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <value>com.github.cimsbioko.server.domain.model.Task</value>
                <value>com.github.cimsbioko.server.domain.model.AuditableCollectedEntity</value>
                <value>com.github.cimsbioko.server.domain.model.AuditableEntity</value>
                <value>com.github.cimsbioko.server.domain.model.FieldWorker</value>
                <value>com.github.cimsbioko.server.domain.model.Individual</value>
                <value>com.github.cimsbioko.server.domain.model.Location</value>
                <value>com.github.cimsbioko.server.domain.model.LocationHierarchy</value>
                <value>com.github.cimsbioko.server.domain.model.LocationHierarchyLevel</value>
                <value>com.github.cimsbioko.server.domain.model.Membership</value>
                <value>com.github.cimsbioko.server.domain.model.Privilege</value>
                <value>com.github.cimsbioko.server.domain.model.Residency</value>
                <value>com.github.cimsbioko.server.domain.model.Role</value>
                <value>com.github.cimsbioko.server.domain.model.SocialGroup</value>
                <value>com.github.cimsbioko.server.domain.model.User</value>
                <value>com.github.cimsbioko.server.domain.model.Error</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">${app.hibernate.showSql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${app.hibernate.export}</prop>
                <prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory
                </prop>
                <prop key="hibernate.jdbc.use_streams_for_binary"></prop>
                <prop key="hibernate.jdbc.batch_size">0</prop>
                <prop key="hibernate.dialect">${app.hibernate.dialect}</prop>
                <prop key="javax.persistence.validation.mode">NONE</prop>
            </props>
        </property>
    </bean>

    <!-- transaction configuration delegates responsibility for transaction
        management -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:annotation-driven/>

    <!-- dao configuration -->

    <!-- All entity DAOs should inhert from this bean -->
    <bean id="baseDao" class="com.github.cimsbioko.server.dao.impl.BaseDaoImpl"
          abstract="true">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="userDao" parent="baseDao"
          class="com.github.cimsbioko.server.dao.impl.UserDaoImpl">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.User"/>
    </bean>

    <bean id="fieldWorkerDao" parent="baseDao"
          class="com.github.cimsbioko.server.dao.impl.FieldWorkerDaoImpl">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.FieldWorker"/>
        <property name="properties" ref="siteProperties"/>
    </bean>

    <bean id="individualDao" parent="baseDao"
          class="com.github.cimsbioko.server.dao.impl.IndividualDaoImpl">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.Individual"/>
        <property name="properties" ref="siteProperties"/>
    </bean>

    <bean id="locationDao" parent="baseDao">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.Location"/>
    </bean>

    <bean id="locationHierarchyDao" parent="baseDao"
          class="com.github.cimsbioko.server.dao.impl.LocationHierarchyDaoImpl">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.LocationHierarchy"/>
    </bean>

    <bean id="locationHierarchyLevelDao" parent="baseDao">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.LocationHierarchyLevel"/>
    </bean>

    <bean id="membershipDao" parent="baseDao">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.Membership"/>
    </bean>

    <bean id="residencyDao" parent="baseDao">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.Residency"/>
    </bean>

    <bean id="roleDao" parent="baseDao"
          class="com.github.cimsbioko.server.dao.impl.RoleDaoImpl">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.Role"/>
    </bean>

    <bean id="socialGroupDao" parent="baseDao">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.SocialGroup"/>
    </bean>

    <bean id="taskDao" parent="baseDao">
        <constructor-arg value="com.github.cimsbioko.server.domain.model.Task"/>
    </bean>

    <bean id="flywayTemplate" class="org.flywaydb.core.Flyway" abstract="true">
        <property name="locations" value="classpath:/db/migrations"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="baselineOnMigrate" value="true"/>
        <property name="baselineVersion">
            <bean class="org.flywaydb.core.api.MigrationVersion" factory-method="fromVersion">
                <constructor-arg value="2"/>
            </bean>
        </property>
    </bean>

    <context:component-scan base-package="com.github.cimsbioko.server.domain" />

    <bean id="appContextAware" class="com.github.cimsbioko.server.domain.constraint.AppContextAware" />
    <bean id="valueConstraintService" class="com.github.cimsbioko.server.domain.service.impl.ValueConstraintServiceImpl" />

    <!-- web -->
    <context:annotation-config/>

    <context:component-scan base-package="com.github.cimsbioko.server.web"/>

    <mvc:annotation-driven />

    <bean id="authSuccessHandler" parent="baseTransactionBean">
        <property name="target">
            <bean class="com.github.cimsbioko.server.web.security.AuthenticationSuccessHandler">
                <constructor-arg ref="userDao"/>
            </bean>
        </property>
    </bean>

    <bean id="logoutSuccessHandler" parent="baseTransactionBean">
        <property name="target">
            <bean class="com.github.cimsbioko.server.web.security.LogoutSuccessHandler">
                <constructor-arg ref="userDao"/>
            </bean>
        </property>
    </bean>

    <bean id="timestampConverter" class="com.github.cimsbioko.server.web.cvt.TimeStampConverter">
        <constructor-arg value="${dateTimeFormat}"/>
    </bean>

    <!-- Entity Converters -->
    <bean id="fieldWorkerConverter" class="com.github.cimsbioko.server.web.cvt.EntityConverterImpl">
        <constructor-arg ref="fieldWorkerDao"/>
        <constructor-arg value="com.github.cimsbioko.server.domain.model.FieldWorker"/>
        <constructor-arg value="java.lang.String"/>
    </bean>

    <bean id="roleConverter" class="com.github.cimsbioko.server.web.cvt.EntityConverterImpl">
        <constructor-arg ref="roleDao"/>
        <constructor-arg value="com.github.cimsbioko.server.domain.model.Role"/>
        <constructor-arg value="java.lang.String"/>
    </bean>

    <bean id="userConverter" class="com.github.cimsbioko.server.web.cvt.EntityConverterImpl">
        <constructor-arg ref="userDao"/>
        <constructor-arg value="com.github.cimsbioko.server.domain.model.User"/>
        <constructor-arg value="java.lang.String"/>
    </bean>

    <bean id="jsfService" class="com.github.cimsbioko.server.web.service.impl.JsfServiceImpl"/>

    <bean id="entityService" parent="baseTransactionBean">
        <property name="target">
            <bean class="com.github.cimsbioko.server.controller.service.impl.EntityServiceImpl">
                <constructor-arg ref="genericDao"/>
                <constructor-arg ref="calendarUtil"/>
                <constructor-arg ref="entityValidator"/>
            </bean>
        </property>
    </bean>

    <!-- task -->
    <context:component-scan base-package="com.github.cimsbioko.server.task" />

    <task:annotation-driven executor="taskExecutor" scheduler="taskScheduler" />
    <task:executor id="taskExecutor" pool-size="1" queue-capacity="25" />
    <task:scheduler id="taskScheduler" pool-size="1"/>

    <bean id="source" class="com.github.cimsbioko.server.task.sqlite.DSSource">
        <constructor-arg ref="dataSource"/>
        <constructor-arg value="${app.export.fetchsize}"/>
    </bean>

    <bean id="target" class="com.github.cimsbioko.server.task.sqlite.SqliteTarget" init-method="loadDriver" />

    <bean id="mapperFactory" class="com.github.cimsbioko.server.task.sqlite.SqliteMapperFactory">
        <constructor-arg>
            <bean class="com.github.cimsbioko.server.task.sqlite.DBTypeExtractor"/>
        </constructor-arg>
    </bean>

    <bean id="exporter" class="com.github.cimsbioko.server.task.sqlite.Exporter">
        <constructor-arg ref="source" />
        <constructor-arg ref="target" />
        <constructor-arg ref="mapperFactory"/>
    </bean>

    <util:properties id="exportQueries" location="classpath:export-queries.properties"/>

    <bean id="errorDao" parent="baseTransactionBean">
        <property name="target">
            <bean class="com.github.cimsbioko.server.dao.impl.ErrorDaoImpl">
                <constructor-arg ref="entityService"/>
            </bean>
        </property>
    </bean>

    <!-- controller -->
    <context:component-scan base-package="com.github.cimsbioko.server.controller"/>

    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userDetailsService"/>
    </security:authentication-manager>

    <!-- allows for the @secured annotation -->
    <security:global-method-security secured-annotations="enabled"/>

    <!-- allow async tasks to inherit security context, make service method calls -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.springframework.security.core.context.SecurityContextHolder"/>
        <property name="targetMethod" value="setStrategyName"/>
        <property name="arguments">
            <list>
                <value>MODE_INHERITABLETHREADLOCAL</value>
            </list>
        </property>
    </bean>

    <!-- Used by the baseTransactionBean to determine when to insert the Transactional Advice -->
    <!-- In this case it will be when the Transactional annotation is found -->
    <bean id="txAttrSource" class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>

    <!-- Base Transaction Bean Declaration -->
    <!-- Any bean that uses the Transactional annotation should set its parent to this bean to receive the proper proxy  -->
    <!-- The <tx:annotation-driven /> element, or AdvisorAutoProxyCreator are not used because multiple proxies were generated -->
    <!-- when using BeforeAdvice with a Transactional class. In other words, the Proxy created for the BeforeAdvice would contain -->
    <!-- another Proxy bean (Transactional Proxy) as its target. If transaction beans declare this as their parent, only 1 proxy -->
    <!-- is created, the Transactional proxy, which can contain a list of interceptors (pre and post), -->
    <!-- which is where BeforeAdvice, etc can be placed. The target of the Transactional proxy is the bean itself, not another proxy -->
    <!-- Did not see any other way of avoiding multiple proxies from being created -->
    <bean id="baseTransactionBean" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
          abstract="true">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributeSource" ref="txAttrSource"/>
    </bean>

    <!-- Simple bean to get current logged in user -->
    <bean id="currentUser" class="com.github.cimsbioko.server.controller.service.impl.CurrentUserImpl" />

    <!-- Authorization Advice to determine if logged in User has privilege to access method within service -->
    <bean id="authorizationAdvice" class="com.github.cimsbioko.server.controller.aop.AuthorizationAdvice">
        <property name="currentUser" ref="currentUser"/>
    </bean>

    <!-- security configuration -->
    <bean id="userDetailsService" parent="baseTransactionBean">
        <property name="target">
            <bean class="com.github.cimsbioko.server.controller.security.UserDetailsService">
                <property name="userDao" ref="userDao"/>
            </bean>
        </property>
    </bean>

    <!-- Base service bean that includes authorization advice -->
    <bean id="baseServiceBean" class="org.springframework.aop.framework.ProxyFactoryBean" abstract="true">
        <property name="interceptorNames">
            <list>
                <value>authorizationAdvice</value>
            </list>
        </property>
    </bean>

    <!-- This should be used as the parent for any service bean that has a Transactional annotation -->
    <bean id="baseServiceTransactionBean" parent="baseTransactionBean" abstract="true">
        <property name="preInterceptors">
            <list>
                <ref bean="authorizationAdvice"/>
            </list>
        </property>
    </bean>

    <bean id="fieldWorkerService" parent="baseServiceBean">
        <property name="target">
            <bean class="com.github.cimsbioko.server.controller.service.impl.FieldWorkerServiceImpl" lazy-init="true">
                <constructor-arg ref="genericDao"/>
                <constructor-arg ref="fieldWorkerIdGenerator"/>
            </bean>
        </property>
    </bean>

    <bean id="individualService" parent="baseServiceTransactionBean" lazy-init="true">
        <property name="target">
            <bean class="com.github.cimsbioko.server.controller.service.impl.IndividualServiceImpl">
                <constructor-arg ref="genericDao"/>
                <constructor-arg ref="individualIdGenerator"/>
                <constructor-arg ref="siteProperties"/>
                <constructor-arg ref="entityService"/>
            </bean>
        </property>
    </bean>

    <bean id="locationHierarchyService" parent="baseServiceBean" lazy-init="true">
        <property name="target">
            <bean class="com.github.cimsbioko.server.controller.service.impl.LocationHierarchyServiceImpl">
                <constructor-arg ref="genericDao"/>
                <constructor-arg ref="entityService"/>
                <constructor-arg ref="locationIdGenerator"/>
                <constructor-arg ref="locationHierarchyIdGenerator"/>
            </bean>
        </property>
    </bean>

    <bean id="residencyService" parent="baseServiceTransactionBean" lazy-init="true">
        <property name="target">
            <bean class="com.github.cimsbioko.server.controller.service.impl.ResidencyServiceImpl">
                <constructor-arg ref="genericDao"/>
                <constructor-arg ref="entityValidator"/>
                <constructor-arg ref="calendarUtil"/>
            </bean>
        </property>
    </bean>

    <bean id="roleService" parent="baseServiceTransactionBean" lazy-init="true">
        <property name="target">
            <bean class="com.github.cimsbioko.server.controller.service.impl.RoleServiceImpl">
                <constructor-arg ref="roleDao"/>
                <constructor-arg ref="genericDao"/>
                <constructor-arg ref="entityService"/>
            </bean>
        </property>
    </bean>

    <bean id="socialGroupService" parent="baseServiceTransactionBean" lazy-init="true">
        <property name="target">
            <bean class="com.github.cimsbioko.server.controller.service.impl.SocialGroupServiceImpl">
                <constructor-arg ref="entityService"/>
                <constructor-arg ref="socialGroupIdGenerator"/>
            </bean>
        </property>
    </bean>

    <!-- Supported fields are LOCATION_NAME, LOCATION_HIERARCHY_ID -->
    <bean id="locationIdScheme" class="com.github.cimsbioko.server.controller.idgeneration.IdScheme">
        <property name="name" value="Location"/>
        <property name="prefix">
            <value>${openhds.locationPrefix}</value>
        </property>
        <property name="checkDigit">
            <value>${openhds.locationCheckDigit}</value>
        </property>
        <property name="incrementBound">
            <value>${openhds.locationIncrementBound}</value>
        </property>
        <property name="length">
            <value>${openhds.locationIdLength}</value>
        </property>
        <property name="fields">
            <map>
                <entry key="LOCATION_NAME">
                    <value>${openhds.locationNameLength}</value>
                </entry>
                <entry key="LOCATION_HIERARCHY_ID">
                    <value>${openhds.locationHierarchyIdLength}</value>
                </entry>
            </map>
        </property>
    </bean>

    <!-- Supported fields are CHILD_LOC_NAME -->
    <!-- If CHILD_LOC_NAME is used, CHILD_LOC_NAME_FIRST and CHILD_LOC_NAME_LAST must be as well -->
    <bean id="locationHierarchyIdScheme" class="com.github.cimsbioko.server.controller.idgeneration.IdScheme">
        <property name="name" value="LocationHierarchy"/>
        <property name="prefix">
            <value>${openhds.locationHPrefix}</value>
        </property>
        <property name="checkDigit">
            <value>${openhds.locationHCheckDigit}</value>
        </property>
        <property name="incrementBound">
            <value>${openhds.locationHIncrementBound}</value>
        </property>
        <property name="length">
            <value>${openhds.locationHIdLength}</value>
        </property>
        <property name="fields">
            <map>
                <entry key="CHILD_LOC_NAME">
                    <value>${openhds.locationHChildLocNameLength}</value>
                </entry>
                <entry key="CHILD_LOC_NAME_FIRST">
                    <value>${openhds.locationHChildLocFirstNameLength}</value>
                </entry>
                <entry key="CHILD_LOC_NAME_LAST">
                    <value>${openhds.locationHChildLocLastNameLength}</value>
                </entry>
            </map>
        </property>
    </bean>

    <!-- Supported fields are INDIVIDUAL_FNAME, INDIVIDUAL_MNAME, INDIVIDUAL_LNAME -->
    <bean id="individualIdScheme" class="com.github.cimsbioko.server.controller.idgeneration.IdScheme">
        <property name="name" value="Individual"/>
        <property name="prefix">
            <value>${openhds.individualPrefix}</value>
        </property>
        <property name="checkDigit">
            <value>${openhds.individualCheckDigit}</value>
        </property>
        <property name="incrementBound">
            <value>${openhds.individualIncrementBound}</value>
        </property>
        <property name="length">
            <value>${openhds.individualIdLength}</value>
        </property>
        <property name="fields">
            <map>
                <entry key="LOCATION_PREFIX">
                    <value>${openhds.locationIdLength}</value>
                </entry>
            </map>
        </property>
    </bean>

    <!-- Supported fields are SOCIALGROUP_NAME -->
    <bean id="socialGroupIdScheme" class="com.github.cimsbioko.server.controller.idgeneration.IdScheme">
        <property name="name" value="SocialGroup"/>
        <property name="prefix">
            <value>${openhds.sgPrefix}</value>
        </property>
        <property name="checkDigit">
            <value>${openhds.sgCheckDigit}</value>
        </property>
        <property name="incrementBound">
            <value>${openhds.sgIncrementBound}</value>
        </property>
        <property name="length">
            <value>${openhds.sgIdLength}</value>
        </property>
        <property name="fields">
            <map>
                <entry key="SOCIALGROUP_NAME">
                    <value>${openhds.sgNameLength}</value>
                </entry>
            </map>
        </property>
    </bean>

    <!-- Supported fields are FIELDWORKER_FNAME, FIELDWORKER_LNAME -->
    <bean id="fieldWorkerIdScheme" class="com.github.cimsbioko.server.controller.idgeneration.IdScheme">
        <property name="name" value="FieldWorker"/>
        <property name="prefix">
            <value>${openhds.fwPrefix}</value>
        </property>
        <property name="checkDigit">
            <value>${openhds.fwCheckDigit}</value>
        </property>
        <property name="incrementBound">
            <value>${openhds.fwIncrementBound}</value>
        </property>
        <property name="length">
            <value>${openhds.fwIdLength}</value>
        </property>
        <property name="fields">
            <map>
                <entry key="FIELDWORKER_FNAME">
                    <value>${openhds.fwFirstNameLength}</value>
                </entry>
                <entry key="FIELDWORKER_LNAME">
                    <value>${openhds.fwLastNameLength}</value>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="entityValidator"
          class="com.github.cimsbioko.server.web.service.impl.EntityValidationServiceJsfImpl">
        <constructor-arg ref="jsfService"/>
    </bean>

    <bean id="userService" parent="baseServiceBean">
        <property name="target">
            <bean class="com.github.cimsbioko.server.web.service.impl.UserServiceImpl">
                <constructor-arg name="genericDao" ref="genericDao"/>
            </bean>
        </property>
    </bean>

    <bean id="navController" class="com.github.cimsbioko.server.web.ui.NavigationMenuBean" scope="session">
        <aop:scoped-proxy/>
    </bean>

    <bean id="baseCrud" abstract="true">
        <property name="jsfService" ref="jsfService"/>
        <property name="entityService" ref="entityService"/>
        <property name="genericDao" ref="genericDao"/>
        <property name="navMenuBean" ref="navController"/>
    </bean>

    <bean id="fieldWorkerCrud" scope="session" parent="baseCrud" class="com.github.cimsbioko.server.web.crud.impl.FieldWorkerCrudImpl">
        <aop:scoped-proxy proxy-target-class="false"/>
        <constructor-arg value="com.github.cimsbioko.server.domain.model.FieldWorker"/>
        <property name="dao" ref="fieldWorkerDao"/>
        <property name="converter" ref="fieldWorkerConverter"/>
    </bean>

    <bean id="roleCrud" scope="session" parent="baseCrud" class="com.github.cimsbioko.server.web.crud.impl.RoleCrudImpl">
        <aop:scoped-proxy proxy-target-class="false"/>
        <constructor-arg value="com.github.cimsbioko.server.domain.model.Role"/>
        <property name="dao" ref="roleDao"/>
        <property name="converter" ref="roleConverter"/>
        <property name="service" ref="roleService"/>
    </bean>

    <bean id="userCrud" scope="session" parent="baseCrud" class="com.github.cimsbioko.server.web.crud.impl.UserCrudImpl">
        <aop:scoped-proxy proxy-target-class="false"/>
        <constructor-arg value="com.github.cimsbioko.server.domain.model.User"/>
        <property name="dao" ref="userDao"/>
        <property name="converter" ref="userConverter"/>
        <property name="service" ref="userService"/>
    </bean>

    <!-- Beans -->
    <bean id="taskBean" class="com.github.cimsbioko.server.web.beans.TaskBean" init-method="scheduleAllTasks">
        <constructor-arg ref="openhdsTaskExecutor"/>
        <constructor-arg ref="taskServiceImpl"/>
        <constructor-arg ref="taskScheduler"/>
        <constructor-arg ref="currentUser"/>
    </bean>

    <bean id="geometryFactory" class="com.vividsolutions.jts.geom.GeometryFactory">
        <constructor-arg>
            <bean class="com.vividsolutions.jts.geom.PrecisionModel"/>
        </constructor-arg>
        <constructor-arg type="int" value="${app.spatial.srid}" />
    </bean>

    <bean id="siteProperties"
          class="com.github.cimsbioko.server.domain.service.impl.SitePropertiesServiceImpl">
        <property name="locale">
            <value>${locale}</value>
        </property>
        <property name="unknownIdentifier">
            <value>${unknownIdentifier}</value>
        </property>
        <property name="inmigrationCode">
            <value>${inmigration}</value>
        </property>
        <property name="outmigrationCode">
            <value>${outmigration}</value>
        </property>
        <property name="birthCode">
            <value>${birth}</value>
        </property>
        <property name="deathCode">
            <value>${death}</value>
        </property>
        <property name="enumerationCode">
            <value>${enumeration}</value>
        </property>
        <property name="marriageCode">
            <value>${marriage}</value>
        </property>
        <property name="notApplicableCode">
            <value>${notApplicable}</value>
        </property>
        <property name="liveBirthCode">
            <value>${liveBirth}</value>
        </property>
        <property name="stillBirthCode">
            <value>${stillBirth}</value>
        </property>
        <property name="miscarriageCode">
            <value>${miscarriage}</value>
        </property>
        <property name="abortionCode">
            <value>${abortion}</value>
        </property>
        <property name="maleCode">
            <value>${male}</value>
        </property>
        <property name="femaleCode">
            <value>${female}</value>
        </property>
        <property name="dataStatusWarningCode">
            <value>${dataStatusWarning}</value>
        </property>
        <property name="dataStatusValidCode">
            <value>${dataStatusValid}</value>
        </property>
        <property name="dataStatusFatalCode">
            <value>${dataStatusFatal}</value>
        </property>
        <property name="dataStatusVoidCode">
            <value>${dataStatusVoid}</value>
        </property>
        <property name="dataStatusPendingCode">
            <value>${dataStatusPending}</value>
        </property>
        <property name="dataStatusClosedCode">
            <value>${dataStatusClosed}</value>
        </property>
        <property name="minimumAgeOfParents">
            <value>${minAgeOfParenthood}</value>
        </property>
        <property name="minimumAgeOfHouseholdHead">
            <value>${minAgeOfHouseholdHead}</value>
        </property>
        <property name="minimumAgeOfMarriage">
            <value>${minAgeOfMarriage}</value>
        </property>
        <property name="minimumAgeOfPregnancy">
            <value>${minAgeOfPregnancy}</value>
        </property>
        <property name="yesResponse">
            <value>${yesResponse}</value>
        </property>
        <property name="noResponse">
            <value>${noResponse}</value>
        </property>
        <property name="earliestEnumerationDate">
            <value>${earliestEnumerationDate}</value>
        </property>
        <property name="specialStudyLocation">
            <value>${openhds.specialStudyLocation}</value>
        </property>
    </bean>

    <beans profile="!migratedb">
        <bean id="flyway" parent="flywayTemplate"/>
    </beans>
    <beans profile="migratedb">
        <bean id="flyway" parent="flywayTemplate" init-method="migrate"/>
    </beans>

</beans>
